<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>F.S.Bellelli</title>
    <link>https://fbellelli.com/</link>
    <atom:link href="https://fbellelli.com/index.xml" rel="self" type="application/rss+xml"/>
    <description>This is the personal website of Francesco Saverio Bellelli. From time to time, I post about things that I find interesting or about some recent work I have been doing. 
</description>
    <image>
      <title>F.S.Bellelli</title>
      <url>https://fbellelli.com/images/favicon feather.ico</url>
      <link>https://fbellelli.com/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Sat, 06 Aug 2022 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Updates to package countries</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco S. Bellelli</dc:creator>
      <link>https://fbellelli.com/posts/2022-08-07-updates-to-package-countries</link>
      <description>


&lt;p&gt;The version 0.2 of the package introduces several functions that identify special columns in country data. These functions can be used as building blocks to automate basic tasks and detect data formats. Here is an overview of a the new functionalities.&lt;/p&gt;
&lt;h2 id="first-lets-install-the-latest-version-of-the-package"&gt;First, let’s install the latest version of the package&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Install and load devtools if needed
install.packages(&amp;quot;devtools&amp;quot;)
library(devtools)

# Install and load countries package
devtools::install_github(&amp;quot;fbellelli/countries&amp;quot;, build_vignettes = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;#load the package
library(countries)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="then-lets-load-an-example-dataset"&gt;Then let’s load an example dataset&lt;/h2&gt;
&lt;p&gt;In this article we will use &lt;a href="https://fbellelli.com/EDB-data.html"&gt;a dataset of country policies&lt;/a&gt; as an example for the functions in the package. This dataset contains 41 columns and has a rather complex strutcture. Every row is identified by a combination of Country name (column 21), Year (Column 9), Policy measure number (column 1), and HS code (column 39) — which is a code identifying traded commodities. This dataset is an extension based on the &lt;a href="https://edb.wto.org/"&gt;WTO environmental databse (EDB)&lt;/a&gt;. More information on the dataset can be found &lt;a href="https://www.wto.org/english/res_e/reser_e/ersd202203_e.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;#download data
temp &amp;lt;- tempfile()
download.file(&amp;quot;https://fbellelli.com/data%20files/Extended%20EDB%20by%20measure-country-HS%20chapter.zip&amp;quot;, temp, mode=&amp;quot;wb&amp;quot;)

#unzip and load it in R
example &amp;lt;- read.csv(
  unzip(temp,&amp;quot;Extended EDB by measure-country-HS chapter/Extended EDB (by measure-country-HS chapter).csv&amp;quot;),
  stringsAsFactors=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="finding-columns-containing-country-and-time-information"&gt;Finding columns containing country and time information&lt;/h2&gt;
&lt;p&gt;The functions &lt;code&gt;find_countrycol()&lt;/code&gt; and &lt;code&gt;find_timecol()&lt;/code&gt; can be used to return respectively all columns containing country names and date/year information.&lt;/p&gt;
&lt;p&gt;In the example below, the function &lt;code&gt;find_countrycol()&lt;/code&gt; is used to examine our example dataset. The argument &lt;code&gt;min_share&lt;/code&gt; is used to indicate whether to look for an entire column of Country names or any column that contains Country names. This is a numeric value indicating the minimum share of entries in the column that are country names.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;#Columns of country names
find_countrycol(example)  &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;COUNTRIES&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;#Return any column containing a country name
find_countrycol(example, min_share=0) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;Notifying.Member&amp;quot; &amp;quot;COUNTRIES&amp;quot;       &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we can look for time columns in the following way:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Date and year columns
find_timecol(example)  &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;Year&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, the function will return the name of the column. However, the argument &lt;code&gt;return_index&lt;/code&gt; can be used to get the indices of the column in the table.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;find_countrycol(example, return_index = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 21&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;find_timecol(example, return_index = TRUE)  &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Computations may take long on large tables with many columns. To speed up operations, these functions operate by evaluating the table on a random sample of rows. The sample size can be adjusted with the argument &lt;code&gt;sample_size&lt;/code&gt;. It also possible to request to use the entire table by passing the value &lt;code&gt;NA&lt;/code&gt;. Finally, it is also possible to request not to return columns containing &lt;code&gt;NA&lt;/code&gt; values by specifying: &lt;code&gt;allow_NA = FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These two functions are based on &lt;code&gt;is_country()&lt;/code&gt; and &lt;code&gt;is_date()&lt;/code&gt;, which can be used to test if a string is a Country name and a date. An overview of the first function is provided in the vignette &lt;em&gt;&lt;a href="https://fbellelli.github.io/countries/articles/dealing_with_names.html"&gt;Dealing with country names&lt;/a&gt;&lt;/em&gt;, here we have a look at `is_date()´.&lt;/p&gt;
&lt;h2 id="testing-dates"&gt;Testing dates&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_date()&lt;/code&gt; takes a string vector as argument and outputs a boolean vector indicating whether the strings are dates. The argument &lt;code&gt;formats&lt;/code&gt; can be used to specify the formats to be checked. Standard R notation can be used for date elements (see the table below).&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;test &amp;lt;- c(&amp;quot;December 2022&amp;quot;, &amp;quot;20/01/1970&amp;quot;, &amp;quot;Banana&amp;quot;, &amp;quot;12.13.2000&amp;quot;) 

is_date(test)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th align="left"&gt;Symbol&lt;/th&gt;
&lt;th align="left"&gt;Definition&lt;/th&gt;
&lt;th align="left"&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td align="left"&gt;%d&lt;/td&gt;
&lt;td align="left"&gt;Day number&lt;/td&gt;
&lt;td align="left"&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td align="left"&gt;%a&lt;/td&gt;
&lt;td align="left"&gt;Abbreviated day name&lt;/td&gt;
&lt;td align="left"&gt;Mon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td align="left"&gt;%A&lt;/td&gt;
&lt;td align="left"&gt;Full day name&lt;/td&gt;
&lt;td align="left"&gt;Monday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td align="left"&gt;%m&lt;/td&gt;
&lt;td align="left"&gt;Month number&lt;/td&gt;
&lt;td align="left"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td align="left"&gt;%b&lt;/td&gt;
&lt;td align="left"&gt;Abbreviated month name&lt;/td&gt;
&lt;td align="left"&gt;Feb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td align="left"&gt;%B&lt;/td&gt;
&lt;td align="left"&gt;Full month name&lt;/td&gt;
&lt;td align="left"&gt;February&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td align="left"&gt;%y&lt;/td&gt;
&lt;td align="left"&gt;Year 2-digits&lt;/td&gt;
&lt;td align="left"&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td align="left"&gt;%Y&lt;/td&gt;
&lt;td align="left"&gt;Year 4-digits&lt;/td&gt;
&lt;td align="left"&gt;2022&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="finding-table-keys"&gt;Finding table keys&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;find_keycol()&lt;/code&gt; is a function that can be used to automate the search of key columns in datasets. A table key is a column or set of columns that uniquely identifies the entries in the table. This function was specifically designed for country data, so it will prioritise the search of country and time columns, which are often keys in country data.&lt;/p&gt;
&lt;p&gt;As shown below, the function correctly identifies the keys for the complex dataset introduced at the beginning of this article.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;find_keycol(example, allow_NA = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                      country                          time 
                  &amp;quot;COUNTRIES&amp;quot;                        &amp;quot;Year&amp;quot; 
                        other                         other 
                         &amp;quot;Nr&amp;quot; &amp;quot;Tentative.HS.chapters.match&amp;quot; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function outputs a vector of column names that uniquely identifies the entries in the table. In addition, it also indicates whether the column contains &lt;em&gt;country&lt;/em&gt;, &lt;em&gt;time&lt;/em&gt; or &lt;em&gt;other&lt;/em&gt; information. Just like the other &lt;em&gt;find&lt;/em&gt; function in this page, it is possible to request the column index instead of the name by passing &lt;code&gt;return_index = TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Due to the potentially very high number of column combinations in a table, the function only tests the more likely options. The function will first check country and time columns. Next, left-most columns are prioritised. Also, the function will only look for the most common country data formats (e.g. cross-sectional, time-series, panel data, dyadic, etc.) and only searches for up to two additional key columns of type &lt;code&gt;other&lt;/code&gt;. If no key is found at the end of the search, the function returns a &lt;code&gt;NULL&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Computation can be slow on large datasets. Therfore, the function relies on a sample of row. The sample size can be controlled with &lt;code&gt;sample_size&lt;/code&gt;. Moreover, it is also possible to restrict the search to a subset of columns by providing a vector of column names or indices in the argument &lt;code&gt;search_only&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;#This will only check if a key is found among the first three columns
find_keycol(example, allow_NA = TRUE, search_only = 1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the function also permits the user to specify whether columns containing &lt;code&gt;NA&lt;/code&gt; values are allowed to be considered as table keys. The default is &lt;code&gt;allow_NA = FALSE&lt;/code&gt; because keys should typically not contain missing values. However, in our example dataset the column &lt;code&gt;Tentative.HS.chapters.match&lt;/code&gt; contains blank entries which are read in R as &lt;code&gt;NA&lt;/code&gt;, therefore the default would return &lt;code&gt;NULL&lt;/code&gt;. The argument &lt;code&gt;allow_NA&lt;/code&gt; is present to deal with these edge cases.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;find_keycol(example, allow_NA = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the user wants to test a specific set of columns, the package also provides the function &lt;code&gt;is_keycol()&lt;/code&gt; to check whether the provided columns uniquely identify the entries in the dataset.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;is_keycol(example, c(&amp;quot;COUNTRIES&amp;quot;,&amp;quot;Year&amp;quot;), allow_NA = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;is_keycol(example, c(&amp;quot;COUNTRIES&amp;quot;,&amp;quot;Year&amp;quot;, &amp;quot;Nr&amp;quot;,&amp;quot;Tentative.HS.chapters.match&amp;quot;), allow_NA = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="tweaked-which.min-and-which.max-functions-and-statistical-mode"&gt;Tweaked which.min and which.max functions and statistical mode&lt;/h2&gt;
&lt;p&gt;Version 0.2 also introduces the &lt;code&gt;which_min&lt;/code&gt;, &lt;code&gt;which_max&lt;/code&gt; and &lt;code&gt;which_mode&lt;/code&gt;. These functions return the position (index) respectively of the minimum, maximum, and mode values of the vector. Unlike base R functions &lt;code&gt;which.min&lt;/code&gt; and &lt;code&gt;which.max&lt;/code&gt;, these functions return the position of ALL minima/maxima instead of only the first one. If desired, one can request only the first value with the argument &lt;code&gt;first_only&lt;/code&gt;. Here is an example:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Return position of all minimum values. Example: Return position of measures with the lowest score?  
which_min(example$MEASURE_SCORE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 82520 82521&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Compare this with which.min, which will return only the first value:
which.min(example$MEASURE_SCORE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 82520&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# If desired, the same behaviour can be obtained with the argument &amp;quot;first_only&amp;quot;
which_min(example$MEASURE_SCORE, first_only = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 82520&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The package also provide a function to get the mode of a vector. That is to say, the observation that appear most frequently in a vector. It supports both numeric, factor and character variables. In case of&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;#return the mode of a vector. Example: which country has the most measures in the dataset? United States
countries::mode(example$COUNTRIES)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;United States&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;#if multiple modes are present, all of them will be returned, unless only the first is requested:
countries::mode(c(1,1,2,3,3,4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 1 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;countries::mode(c(1,1,2,3,3,4), first_only=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;#we can also get the position of all US entries
head(which_mode(example$COUNTRIES),10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] 1093 1094 1098 1099 1100 1112 1115 1116 1120 1121&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="what-will-come-next"&gt;What will come next?&lt;/h2&gt;
&lt;p&gt;This version of the package introduces many building blocks that will be used to design more advanced functionalities.&lt;/p&gt;
&lt;p&gt;The next package version will aim to bring a merging function that deals with differences in country names and with time columns. I will also work on a wrapper function to allow easy download of country data from public sources (e.g. World Bank, IMF, FRED, etc…). Ideally, we want to be able to download country data from multiple sources and obtain a single table with merged data ready to use, all in one simple command.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">d0158d786ef0a3e807ab088154397103</distill:md5>
      <category>coding</category>
      <guid>https://fbellelli.com/posts/2022-08-07-updates-to-package-countries</guid>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://fbellelli.com/posts/2022-08-07-updates-to-package-countries/../../images/Countries_logo.png" medium="image" type="image/png" width="864" height="1000"/>
    </item>
    <item>
      <title>A brief introduction to natural hazard risk analysis</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco S. Bellelli</dc:creator>
      <link>https://fbellelli.com/posts/2022-05-22-a-brief-introduction-to-natural-hazard-risk-analysis</link>
      <description>This article is a quick guide on the basic steps involved in natural hazard risk analysis. It briefly touches on some of the most common steps:  geocoding, hazard maps, damage curves and climate projections. I demonstrate how R can be used to assess exposure of assets with a simple example on flood risk for presidential palaces around the world.</description>
      <category>risk</category>
      <category>coding</category>
      <category>environment</category>
      <category>other</category>
      <guid>https://fbellelli.com/posts/2022-05-22-a-brief-introduction-to-natural-hazard-risk-analysis</guid>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://fbellelli.com/posts/2022-05-22-a-brief-introduction-to-natural-hazard-risk-analysis/flood.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>First version of countries</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco S. Bellelli</dc:creator>
      <link>https://fbellelli.com/posts/2022-02-27-first-version-of-countries</link>
      <description>The first development version of the package countries is now available on Github. This post looks at how the package can be used to work with country names.</description>
      <category>coding</category>
      <guid>https://fbellelli.com/posts/2022-02-27-first-version-of-countries</guid>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://fbellelli.com/posts/2022-02-27-first-version-of-countries/../../images/Countries_logo.png" medium="image" type="image/png" width="864" height="1000"/>
    </item>
    <item>
      <title>A package for country data</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco S. Bellelli</dc:creator>
      <link>https://fbellelli.com/posts/2021-06-20-a-package-for-country-data</link>
      <description>I am working on an R package designed to quickly wrangle, merge and explore country data</description>
      <category>coding</category>
      <guid>https://fbellelli.com/posts/2021-06-20-a-package-for-country-data</guid>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.britannica.com/13/129613-131-30279F20/Flags-world-flags-Country-history-blog-travel-2009.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>TileMaster: a strategy game in Shiny</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco S. Bellelli</dc:creator>
      <link>https://fbellelli.com/posts/2021-04-03-tilemaster-a-strategy-game-in-shiny</link>
      <description>I created a small strategy game with RStudios' Shiny platform. If it can run a data dashboard, why not a strategy game?</description>
      <category>coding</category>
      <guid>https://fbellelli.com/posts/2021-04-03-tilemaster-a-strategy-game-in-shiny</guid>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://fbellelli.com/posts/2021-04-03-tilemaster-a-strategy-game-in-shiny/../../images/tilemaster_screenshot.png" medium="image" type="image/png" width="1599" height="1531"/>
    </item>
  </channel>
</rss>
